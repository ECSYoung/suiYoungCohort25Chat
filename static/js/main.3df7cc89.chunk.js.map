{"version":3,"sources":["Components/Helmet.js","Components/Header.js","Components/InstructionButton.js","Components/MessageInputForm.js","Components/Aside.js","firebase.js","Components/EachMessage.js","App.js","serviceWorker.js","index.js"],"names":["Application","className","Helmet","src","crossorigin","href","rel","React","Component","Header","onClick","window","location","reload","instructionButton","props","click","MessageInputForm","action","onSubmit","e","handleFormSubmit","htmlFor","type","id","onChange","handleChange","value","userInputProp","Aside","instructions","show","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","EachMessage","msgProp","colorChoice","message","userColor","key","userImg","alt","userName","database","ref","child","remove","userInput","App","asideToggleClickHandler","setState","prevState","asideOpen","scrollToBottom","chatDiv","document","querySelector","scrollTop","scrollHeight","target","preventDefault","push","state","messages","dbRef","Swal","fire","icon","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","login","fetch","then","response","ok","Error","statusText","json","catch","error","showValidationMessage","allowOutsideClick","result","imageUrl","avatar_url","a","inputOptions","Promise","resolve","setTimeout","redBubble","yellowBubble","tealBubble","olgaBubble","blackBubble","default","inputValidator","color","html","on","dataFromDb","val","newState","messageInfo","asideDrawer","this","InstructionButton","map","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3df7cc89.chunk.js","sourcesContent":["// a couple of functions from the React library\r\nimport React from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass Application extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"application\">\r\n                <Helmet>\r\n                    <title>Cohort 25 Chat</title>\r\n                    {/* insert fontawesome kit */}\r\n                    <script src=\"https://kit.fontawesome.com/dfdc9c622d.js\" crossorigin=\"anonymous\"></script>\r\n\r\n                    <link href=\"https://fonts.googleapis.com/css?family=Poppins&display=swap\" rel=\"stylesheet\"/>\r\n                    \r\n                </Helmet>\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Application;","// a couple of functions from the React library\r\nimport React from 'react';\r\n\r\nconst Header = ()=>{\r\n\r\n    function refreshPage() {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Cohort 25 Chat <i className=\"fas fa-comment-dots\"></i></h1>\r\n            <button onClick={refreshPage}>New User <i className=\"fas fa-grin-stars\"></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header;","// a couple of functions from the React library\r\nimport React from 'react';\r\n// import Aside from './Aside';\r\n\r\nconst instructionButton = props => {\r\n    return (\r\n        <div className=\"asideButtonContainer\">\r\n            <button onClick={props.click} className=\"instrIcon\">\r\n            <i className=\"fas fa-question-circle\"></i>\r\n            </button>\r\n            <h3>‚Üê Click Me To Start!</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default instructionButton;","// a couple of functions from the React library\r\nimport React from \"react\";\r\n\r\nconst MessageInputForm=(props)=> (\r\n        <div className=\"messageInput\">\r\n            <form action=\"submit\" onSubmit={(e)=> props.handleFormSubmit(e)}>\r\n            <label \r\n                className=\"visually-hidden\" \r\n                htmlFor=\"messageForm\">Please type your message!</label>\r\n            <input \r\n                className=\"inputField\"\r\n                type=\"text\" \r\n                id=\"messageForm\" \r\n                onChange={props.handleChange}\r\n                value={props.userInputProp} // good for accessibility and screen readers, this will track the changes even if they leave and come back\r\n            />\r\n\r\n            \r\n            <button \r\n                className=\"submitButton\"\r\n                type=\"submit\"\r\n                >\r\n            <i className=\"fas fa-paper-plane\"></i> \r\n            </button> \r\n            </form>\r\n        </div>\r\n        );\r\n\r\n\r\nexport default MessageInputForm;\r\n","// a couple of functions from the React library\r\nimport React from 'react';\r\n\r\nconst Aside = props => {\r\n\r\n    // give new class to aside via variable\r\n    let instructions = 'sideDrawer';\r\n\r\n    // if the state for asideOpen changes to true, then add on second class of open\r\n    if (props.show) {\r\n        instructions = \"sideDrawer open\";\r\n    }\r\n\r\n    return (\r\n        <aside className={instructions}>\r\n            <div className=\"instrContainer\">\r\n                <h3>How To Use:</h3>\r\n                <ol>\r\n                    <li><span className=\"blueFont\">[tab]</span>-to or click into the input field and type your message.</li>\r\n                    <li>Press <span className=\"blueFont\">[enter]</span> or <span className=\"blueFont\">[tab]</span> to the send button (the paper airplane)</li>\r\n                    <li>Your message will appear above!</li>\r\n                    <li>Click <span className=\"blueFont\">[New User]</span> button at the top right to give a new user name!</li>\r\n                    <li>To clear your last message Click the \"<i className=\"fas fa-trash-alt\"></i>\"!</li>\r\n                </ol>\r\n            </div>\r\n        </aside>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Aside;","// firebase.js\r\nimport firebase from \"firebase\";\r\n\r\n// Initialize Firebase\r\n// USE YOUR CONFIG OBJECT\r\nconst config = {\r\n    apiKey: \"AIzaSyCdzdADg9WBTilxo_wNHdv-IyG4IkMILwY\",\r\n    authDomain: \"project5-database.firebaseapp.com\",\r\n    databaseURL: \"https://project5-database.firebaseio.com\",\r\n    projectId: \"project5-database\",\r\n    storageBucket: \"project5-database.appspot.com\",\r\n    messagingSenderId: \"54113912690\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","// a couple of functions from the React library\r\nimport React from \"react\";\r\n\r\n// import firebase\r\nimport firebase from \"./../firebase\";\r\n\r\nconst EachMessage = ({msgProp}) => {\r\n    // üß† function to remove messages\r\n    let remove = key => {\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(msgProp.key).remove();\r\n    };\r\n\r\n    let colorChoice = msgProp.message.userColor;\r\n\r\n        return (\r\n            <div className={colorChoice} key={msgProp.key}>\r\n                {/* Github Avatar for each user */}\r\n                <img src={msgProp.message.userImg} alt={msgProp.message.userName} />\r\n                {/* button to delete messages */}\r\n                <button\r\n                className=\"trash\"\r\n                onClick={() => {\r\n                    remove(msgProp.message.key);\r\n                }}\r\n                >\r\n                <i className=\"fas fa-trash-alt\"></i>\r\n                </button>{\" \"}\r\n                {/* user name and message */}\r\n                <p>\r\n                <span className=\"blueFont\">{msgProp.message.userName} {\" \"}:{\" \"}</span>\r\n                {msgProp.message.userInput}\r\n                </p>\r\n            </div>\r\n        );\r\n\r\n};\r\n\r\nexport default EachMessage;\r\n","// a couple of functions from the React library\nimport React, { Component } from \"react\";\n\n// import components\nimport Helmet from \"./Components/Helmet\";\nimport Header from \"./Components/Header\";\nimport InstructionButton from \"./Components/InstructionButton\";\nimport MessageInputForm from \"./Components/MessageInputForm\";\nimport Aside from \"./Components/Aside\";\nimport EachMessage from \"./Components/EachMessage\";\n\n// import firebase\nimport firebase from \"./firebase\";\n\n// import sweet alerts\nimport Swal from \"sweetalert2\";\n\n// CSS for the `App` component\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      asideOpen: true,\n      messages: [],\n      userInput: \"\",\n      userName: \"\",\n      userImg: \"\",\n      userColor: \"default\"\n    };\n  }\n\n  // function to slide the aside in and out.\n  asideToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { asideOpen: !prevState.asideOpen };\n    });\n  };\n\n  // function for the chat input and display\n  componentDidMount() {\n    // create a variable that holds a reference to  database\n    const dbRef = firebase.database().ref();\n\n    // üß† create a variable that holds a reference to the user's name.\n    let userName;\n\n    Swal.fire({\n      icon: \"question\",\n      title: \"Submit your Github username\",\n      input: \"text\",\n      inputAttributes: {\n        autocapitalize: \"off\"\n      },\n      showCancelButton: false,\n      confirmButtonText: \"Look up\",\n      showLoaderOnConfirm: true,\n      preConfirm: login => {\n        return fetch(`//api.github.com/users/${login}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n            return response.json();\n          })\n          .catch(error => {\n            Swal.showValidationMessage(`Request failed: ${error}`);\n          });\n      },\n      allowOutsideClick: false\n    })\n      .then(result => {\n        if (result.value) {\n          Swal.fire({\n            title: `Here is ${result.value.login}'s avatar!`,\n            imageUrl: result.value.avatar_url\n          });\n          this.setState({\n            userImg: result.value.avatar_url\n          });\n\n          // üß† user select their color, once selected userColor in state pushed to message array and used to change only their message bubble:\n\n          (async () => {\n            /* inputOptions can be an object or Promise */\n            const inputOptions = new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  redBubble: \"nickRed\",\n                  yellowBubble: \"Yellow\",\n                  tealBubble: \"Teal\",\n                  olgaBubble: \"olgaPurple\",\n                  blackBubble: \"Black\",\n                  default: \"Default\"\n                });\n              }, 1000);\n            });\n\n            const { value: color } = await Swal.fire({\n              title: \"Select color\",\n              input: \"radio\",\n              inputOptions: inputOptions,\n              inputValidator: value => {\n                if (!value) {\n                  return \"You need to choose something!\";\n                }\n              }\n            });\n\n            if (color) {\n              Swal.fire({ html: `You selected: ${color}` });\n            }\n            this.setState({\n              userColor: color\n            });\n          })();\n        }\n        userName = result.value.login;\n\n        this.setState({\n          userName: userName\n        });\n      })\n      .then(() => {\n        this.scrollToBottom();\n      });\n\n    // üß† event listener that takes a callback function used to get data from the database and call it response.\n    dbRef.on(\"value\", response => {\n      const dataFromDb = response.val();\n      // see the information and parse the way we want it.\n\n      // create a variable to store the new state.\n      const newState = [];\n\n      // loop over each value in the array and push them to a new array (newState).\n      for (let key in dataFromDb) {\n        const messageInfo = {\n          key: key,\n          message: dataFromDb[key]\n        };\n        newState.push(messageInfo);\n      }\n      // call this.setState to update the component state using the local array newState.\n      this.setState({\n        messages: newState,\n        userName\n      });\n    });\n  }\n\n  scrollToBottom = () => {\n    const chatDiv = document.querySelector(\".chatDisplay\");\n    chatDiv.scrollTop = chatDiv.scrollHeight;\n  };\n\n\n  handleChange = e => {\n    this.setState({\n      userInput: e.target.value\n    });\n  };\n\n  // üß† on submit, push user input into firebase\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push({\n      userInput: this.state.userInput,\n      userName: this.state.userName,\n      userImg: this.state.userImg,\n      userColor: this.state.userColor\n    });\n    // return input to empty.\n    // eslint-disable-next-line\n    this.state.userInput = \"\";\n  };\n\n  render() {\n    // if statement for the aside state of being open or closed.\n\n    let asideDrawer;\n\n    if (this.state.asideOpen) {\n      asideDrawer = <Aside />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Helmet />\n\n        {/* toggle function adding class to aside drawer passesd into button component  */}\n        <InstructionButton click={this.asideToggleClickHandler} />\n\n        <header>\n          <Header />\n        </header>\n\n        {/* the aside drawer */}\n        {asideDrawer}\n\n        <div className=\"mainGrid\">\n          <div className=\"chatDisplay\">\n            {this.state.messages.map(message => (\n                // Div containers for each message.\n                <EachMessage msgProp={message} />\n              ))}\n          </div>\n\n          {/* input field for user to type their message, passing function into component */}\n          <MessageInputForm handleFormSubmit={this.handleFormSubmit} handleChange={this.handleChange} userInputProp={this.state.userInput}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}