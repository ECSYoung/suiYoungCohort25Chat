{"version":3,"sources":["Components/Helmet.js","Components/Header.js","Components/InstructionButton.js","Components/Main.js","Components/MessageInputForm.js","Components/Aside.js","Components/Footer.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Application","className","Helmet","src","crossorigin","React","Component","Header","instructionButton","props","onClick","click","Main","Aside","instructions","show","Footer","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","asideToggleClickHandler","setState","prevState","asideOpen","handleChange","e","userInput","target","value","handleFormSubmit","preventDefault","database","ref","push","state","messages","on","response","dataFromDb","val","console","log","newState","key","messageInfo","name","asideDrawer","this","InstructionButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAoBeA,E,iLAdP,OACI,yBAAKC,UAAU,eACX,kBAACC,EAAA,OAAD,KACI,iDAEA,4BAAQC,IAAI,4CAA4CC,YAAY,eAJ5E,W,GAHcC,IAAMC,WCOjBC,EARA,WACX,OACQ,+CCaGC,EAdW,SAAAC,GACtB,OACI,yBAAKR,UAAU,wBACX,4BAAQS,QAASD,EAAME,MAAOV,UAAU,aACxC,uBAAGA,UAAU,4BAEb,kDCMGW,GCbgBN,Y,iLDI3B,OACI,yBAAKL,UAAU,YACX,yBAAKA,UAAU,qB,GAJRK,cE0BJO,EA5BD,SAAAJ,GAGV,IAAIK,EAAe,aAOnB,OAJIL,EAAMM,OACND,EAAe,mBAIf,2BAAOb,UAAWa,GACd,yBAAKb,UAAU,kBACX,2CACA,4BACI,iDACA,iDACA,iDACA,iDACA,qDCTLe,E,iLARX,OACI,4BAAQf,UAAU,mB,GAHLK,a,iBCUrBW,IAASC,cARM,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,gBAKRP,QAAf,ECwFeQ,G,kBAtFb,aAAe,IAAD,8BACZ,+CASFC,wBAA0B,WACxB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEC,WAAYD,EAAUC,eAZrB,EA8CdC,aAAe,SAAAC,GAEb,EAAKJ,SAAS,CACZK,UAAWD,EAAEE,OAAOC,SAjDV,EAqDdC,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACYnB,EAASoB,WAAWC,MAC5BC,KAAK,EAAKC,MAAMR,WACtB,EAAKL,SAAS,CACZK,UAAW,MAxDb,EAAKQ,MAAQ,CACXX,WAAW,EACXY,SAAU,GACVT,UAAW,IALD,E,iFAiBO,IAAD,OAEJf,EAASoB,WAAWC,MAG5BI,GAAG,SAAS,SAAAC,GAChB,IAAMC,EAAaD,EAASE,MAE5BC,QAAQC,IAAI,aAAcH,GAG1B,IAAMI,EAAW,GAGjB,IAAK,IAAIC,KAAOL,EAAY,CAC1B,IAAMM,EAAc,CAClBD,IAAKA,EACLE,KAAMP,EAAWK,IAEnBD,EAAST,KAAKW,GAIhB,EAAKvB,SAAS,CACZc,SAAUO,S,+BAsBd,IAAII,EAMJ,OAJIC,KAAKb,MAAMX,YACbuB,EAAc,kBAAC,EAAD,OAId,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,kBAACqD,EAAD,CAAmB3C,MAAO0C,KAAK3B,0BAC/B,gCACE,kBAAC,EAAD,OAED0B,EACC,kBAAC,EAAD,MAGF,kBAAC,EAAD,W,GAjFU9C,cCLEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.105241e4.chunk.js","sourcesContent":["// a couple of functions from the React library\r\nimport React from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass Application extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"application\">\r\n                <Helmet>\r\n                    <title>Cohort 25 Chat</title>\r\n                    {/* insert fontawesome kit */}\r\n                    <script src=\"https://kit.fontawesome.com/dfdc9c622d.js\" crossorigin=\"anonymous\"></script>\r\n                    \r\n                </Helmet>\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Application;","// a couple of functions from the React library\r\nimport React, { Component } from 'react';\r\n\r\nconst Header = ()=>{\r\n    return(\r\n            <h1>Cohort 25 Chat</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header;","// a couple of functions from the React library\r\nimport React from 'react';\r\n// import Aside from './Aside';\r\n\r\nconst instructionButton = props => {\r\n    return (\r\n        <div className=\"asideButtonContainer\">\r\n            <button onClick={props.click} className=\"instrIcon\">\r\n            <i className=\"fas fa-question-circle\"></i>\r\n            </button>\r\n            <h3>‚Üê Click Me!</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default instructionButton;","// a couple of functions from the React library\r\nimport React, { Component } from 'react';\r\nimport MessageInputForm from './MessageInputForm';\r\n\r\n\r\nclass Main extends Component{\r\nrender(){\r\n    return (\r\n        <div className=\"mainGrid\">\r\n            <div className=\"chatDisplay\"></div>\r\n            {/* <MessageInputForm /> */}\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default Main;","// a couple of functions from the React library\r\nimport React, { Component } from \"react\";\r\n\r\nclass MessageInputForm extends Component {\r\n    render(props) {\r\n        return (\r\n        <div className=\"messageInput\">\r\n            <form action=\"submit\" onSubmit={props.handleFormSubmit}>\r\n            <label htmlFor=\"messageForm\">Please Add A Toy To the ToyBox!</label>\r\n            <input \r\n                type=\"text\" \r\n                id=\"messageForm\" \r\n                onChange={props.handleChange}\r\n                value={props.state.userInput} // good for accessibility and screen readers, this will track the changes even if they leave and come back\r\n            />\r\n            <button \r\n                type=\"submit\" \r\n            > send </button>\r\n        </form>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageInputForm;\r\n","// a couple of functions from the React library\r\nimport React from 'react';\r\n\r\nconst Aside = props => {\r\n\r\n    // give new class to aside via variable\r\n    let instructions = 'sideDrawer';\r\n\r\n    // if the state for asideOpen changes to true, then add on second class of open\r\n    if (props.show) {\r\n        instructions = \"sideDrawer open\";\r\n    }\r\n\r\n    return (\r\n        <aside className={instructions}>\r\n            <div className=\"instrContainer\">\r\n                <h2>How To Use:</h2>\r\n                <ul>\r\n                    <li>instructions here</li>\r\n                    <li>instructions here</li>\r\n                    <li>instructions here</li>\r\n                    <li>instructions here</li>\r\n                    <li>instructions here</li>\r\n                </ul>\r\n            </div>\r\n        </aside>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Aside;","// a couple of functions from the React library\r\nimport React, { Component } from 'react';\r\n\r\nclass Footer extends Component{\r\nrender(){\r\n    return (\r\n        <footer className=\"App-header\">\r\n        \r\n        </footer>\r\n    );\r\n}\r\n}\r\n\r\nexport default Footer;","// firebase.js\r\nimport firebase from \"firebase\";\r\n\r\n// Initialize Firebase\r\n// USE YOUR CONFIG OBJECT\r\nconst config = {\r\n    apiKey: \"AIzaSyCdzdADg9WBTilxo_wNHdv-IyG4IkMILwY\",\r\n    authDomain: \"project5-database.firebaseapp.com\",\r\n    databaseURL: \"https://project5-database.firebaseio.com\",\r\n    projectId: \"project5-database\",\r\n    storageBucket: \"project5-database.appspot.com\",\r\n    messagingSenderId: \"54113912690\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","// a couple of functions from the React library\nimport React, { Component } from 'react';\n\n// import components\nimport Helmet from './Components/Helmet';\nimport Header from './Components/Header';\nimport InstructionButton from './Components/InstructionButton';\nimport Main from './Components/Main';\nimport Aside from './Components/Aside';\nimport Footer from './Components/Footer';\n\n// import firebase\nimport firebase from './firebase';\n\n// CSS for the `App` component\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      asideOpen: true,\n      messages: [],\n      userInput: \"\"\n    };\n  }\n\n  // function to slide the aside in and out.\n  asideToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { asideOpen: !prevState.asideOpen };\n    });\n  };\n\n  // function for the chat input and display\n  componentDidMount() {\n    // create a variable that holds a reference to our database\n    const dbRef = firebase.database().ref();\n\n    // event listener that takes a callback function used to get data from the database and call it response.\n    dbRef.on(\"value\", response => {\n      const dataFromDb = response.val();\n      // see the information and parse the way we want it.\n      console.log(\"dataFromDb\", dataFromDb);\n\n      // create a variable to store the new state.\n      const newState = [];\n\n      // loop over each value in the array and push them to a new array (newState).\n      for (let key in dataFromDb) {\n        const messageInfo = {\n          key: key,\n          name: dataFromDb[key]\n        };\n        newState.push(messageInfo);\n      }\n\n      // call this.setState to update the component state using the local array newState.\n      this.setState({\n        messages: newState\n      });\n    });\n  }\n\n  handleChange = e => {\n    // console.log('Things are changing', e.target.value);\n    this.setState({\n      userInput: e.target.value\n    });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault(); // default behavior of a form is to refresh the page. Stop this.\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userInput);\n    this.setState({\n      userInput: \"\"\n    });\n  };\n\n  render() {\n    let asideDrawer;\n\n    if (this.state.asideOpen) {\n      asideDrawer = <Aside />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Helmet />\n        <InstructionButton click={this.asideToggleClickHandler} />\n        <header>\n          <Header />\n        </header>\n        {asideDrawer}\n          <Main />\n          \n        {/* may not need footer */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}