{"version":3,"sources":["Components/Helmet.js","Components/Header.js","Components/InstructionButton.js","Components/MessageInputForm.js","Components/Aside.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Application","className","Helmet","src","crossorigin","React","Component","Header","onClick","window","location","reload","instructionButton","props","click","MessageInputForm","handleChange","e","setState","userInput","target","value","handleSubmit","preventDefault","handleFormSubmit","state","action","onSubmit","this","htmlFor","type","id","onChange","Aside","instructions","show","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","asideToggleClickHandler","prevState","asideOpen","database","ref","push","userName","userId","remove","key","dbRef","console","log","child","messages","userID","userImg","Swal","fire","icon","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","login","fetch","then","response","ok","Error","statusText","json","catch","error","showValidationMessage","allowOutsideClick","result","imageUrl","avatar_url","queue","text","data","insertQueueStep","ip","on","dataFromDb","val","newState","messageInfo","message","asideDrawer","InstructionButton","map","alt","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3cb97eb4.chunk.js","sourcesContent":["// a couple of functions from the React library\r\nimport React from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass Application extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"application\">\r\n                <Helmet>\r\n                    <title>Cohort 25 Chat</title>\r\n                    {/* insert fontawesome kit */}\r\n                    <script src=\"https://kit.fontawesome.com/dfdc9c622d.js\" crossorigin=\"anonymous\"></script>\r\n                    \r\n                </Helmet>\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Application;","// a couple of functions from the React library\r\nimport React from 'react';\r\n\r\nconst Header = ()=>{\r\n\r\n    function refreshPage() {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Cohort 25 Chat <i className=\"fas fa-comment-dots\"></i></h1>\r\n            <button onClick={refreshPage}>New User <i className=\"fas fa-grin-stars\"></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header;","// a couple of functions from the React library\r\nimport React from 'react';\r\n// import Aside from './Aside';\r\n\r\nconst instructionButton = props => {\r\n    return (\r\n        <div className=\"asideButtonContainer\">\r\n            <button onClick={props.click} className=\"instrIcon\">\r\n            <i className=\"fas fa-question-circle\"></i>\r\n            </button>\r\n            <h3>‚Üê Click Me!</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default instructionButton;","// a couple of functions from the React library\r\nimport React, { Component } from \"react\";\r\n\r\nclass MessageInputForm extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            userInput:\"\"\r\n        }\r\n    }\r\n\r\n    handleChange = e => {\r\n        // console.log('Things are changing', e.target.value);\r\n        this.setState({\r\n        userInput: e.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault(); \r\n        this.props.handleFormSubmit(this.state.userInput);\r\n        // return input to empty.\r\n        // eslint-disable-next-line\r\n        this.state.userInput=\"\"\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n        <div className=\"messageInput\">\r\n            <form action=\"submit\" onSubmit={this.handleSubmit}>\r\n            <label \r\n                className=\"visually-hidden\" \r\n                htmlFor=\"messageForm\">Please type your message!</label>\r\n            <input \r\n                className=\"inputField\"\r\n                type=\"text\" \r\n                id=\"messageForm\" \r\n                onChange={this.handleChange}\r\n                value={this.state.userInput} // good for accessibility and screen readers, this will track the changes even if they leave and come back\r\n            />\r\n            <button \r\n                className=\"submitButton\"\r\n                type=\"submit\" \r\n            > \r\n            <i className=\"fas fa-paper-plane\"></i> \r\n            </button>\r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageInputForm;\r\n","// a couple of functions from the React library\r\nimport React from 'react';\r\n\r\nconst Aside = props => {\r\n\r\n    // give new class to aside via variable\r\n    let instructions = 'sideDrawer';\r\n\r\n    // if the state for asideOpen changes to true, then add on second class of open\r\n    if (props.show) {\r\n        instructions = \"sideDrawer open\";\r\n    }\r\n\r\n    return (\r\n        <aside className={instructions}>\r\n            <div className=\"instrContainer\">\r\n                <h2>How To Use:</h2>\r\n                <ol>\r\n                    <li><span className=\"blueFont\">[tab]</span>-to or click into the input field and type your message.</li>\r\n                    <li>Press <span className=\"blueFont\">[enter]</span> or <span className=\"blueFont\">[tab]</span> to the send button (the paper airplane)</li>\r\n                    <li>Your message will appear above!</li>\r\n                    <li>Click <span className=\"blueFont\">[New User]</span> button at the top right to give a new user name!</li>\r\n                    <li>To clear your last message!</li>\r\n                </ol>\r\n            </div>\r\n        </aside>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Aside;","// firebase.js\r\nimport firebase from \"firebase\";\r\n\r\n// Initialize Firebase\r\n// USE YOUR CONFIG OBJECT\r\nconst config = {\r\n    apiKey: \"AIzaSyCdzdADg9WBTilxo_wNHdv-IyG4IkMILwY\",\r\n    authDomain: \"project5-database.firebaseapp.com\",\r\n    databaseURL: \"https://project5-database.firebaseio.com\",\r\n    projectId: \"project5-database\",\r\n    storageBucket: \"project5-database.appspot.com\",\r\n    messagingSenderId: \"54113912690\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","// a couple of functions from the React library\nimport React, { Component } from 'react';\n\n// import components\nimport Helmet from './Components/Helmet';\nimport Header from './Components/Header';\nimport InstructionButton from './Components/InstructionButton';\nimport MessageInputForm from './Components/MessageInputForm';\nimport Aside from './Components/Aside';\n\n// import firebase\nimport firebase from './firebase';\n\n// import sweet alerts\nimport Swal from \"sweetalert2\";\n\n// CSS for the `App` component\nimport './App.scss';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      asideOpen: true,\n      messages: [],\n      userInput: \"\",\n      userName: \"\",\n      userID: \"\",\n      userImg: \"\"\n    };\n  }\n\n  // function to slide the aside in and out.\n  asideToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { asideOpen: !prevState.asideOpen };\n    });\n  };\n\n  // function for the chat input and display\n  componentDidMount() {\n    // create a variable that holds a reference to  database\n    const dbRef = firebase.database().ref();\n    \n    // create a variable that holds a reference to the user's name.\n    let userName;\n\n    Swal.fire({\n      icon: \"question\",\n      title: \"Submit your Github username\",\n      input: \"text\",\n      inputAttributes: {\n        autocapitalize: \"off\"\n      },\n      showCancelButton: false,\n      confirmButtonText: \"Look up\",\n      showLoaderOnConfirm: true,\n      preConfirm: login => {\n        return fetch(`//api.github.com/users/${login}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n            return response.json();\n          })\n          .catch(error => {\n            Swal.showValidationMessage(`Request failed: ${error}`);\n          });\n      },\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.value) {\n        Swal.fire({\n          title: `Here is ${result.value.login}'s avatar!`,\n          imageUrl: result.value.avatar_url\n        });\n          this.setState ({\n            userImg: result.value.avatar_url\n          })\n          console.log(this.state.userImg)\n        // retrieve user IP Address\n        const ipAPI = \"//api.ipify.org?format=json\";\n        Swal.queue([\n          {\n            title: \"Your public IP\",\n            confirmButtonText: \"Show my public IP\",\n            text: \"Your public IP will be received via AJAX request\",\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n              return fetch(ipAPI)\n                .then(response => response.json())\n                .then(data => {\n                  Swal.insertQueueStep(data.ip)\n                  this.setState({\n                    userId: data.ip\n                  });\n                })\n                .catch(() => {\n                  Swal.insertQueueStep({\n                    icon: \"error\",\n                    title: \"Unable to get your public IP\"\n                  });\n                });\n\n            }\n          }\n        ]);\n      }\n      userName = result.value.login;\n      \n      this.setState({\n        userName: userName\n      });\n    });\n\n\n    // event listener that takes a callback function used to get data from the database and call it response.\n    dbRef.on(\"value\", response => {\n      const dataFromDb = response.val();\n      // see the information and parse the way we want it.\n      // console.log(\"dataFromDb\", dataFromDb);\n\n      // create a variable to store the new state.\n      const newState = [];\n\n      // loop over each value in the array and push them to a new array (newState).\n      for (let key in dataFromDb) {\n        const messageInfo = {\n          key: key,\n          message: dataFromDb[key]\n\n        };\n        newState.push(messageInfo);\n      }\n      // console.log('newState Array:', newState);\n      // call this.setState to update the component state using the local array newState.\n      this.setState({\n        messages: newState,\n        userName\n      });\n    });\n  }\n\n  // on submit, push user input into firebase\n  handleFormSubmit = userInput => {\n    const dbRef = firebase.database().ref();\n    dbRef.push({\n      userInput,\n      userName: this.state.userName,\n      userId: this.state.userId\n    });\n  };1\n\n  remove = (key) => {\n    // event.preventDefault();\n    const dbRef = firebase.database().ref();\n    console.log('dbRef', dbRef.child(key))\n    console.log('key', key);\n    dbRef.child(key).remove();\n  }\n\n  render() {\n\n    // if statement for the aside state of being open or closed.\n    let asideDrawer;\n\n    if (this.state.asideOpen) {\n      asideDrawer = <Aside />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Helmet />\n        <InstructionButton click={this.asideToggleClickHandler} />\n        <header>\n          <Header />\n        </header>\n        {asideDrawer}\n\n        <div className=\"mainGrid\">\n          <div className=\"chatDisplay\">\n            {this.state.messages.map(message => {\n              return (\n                <div className=\"userText\" key={message.key}>\n                  <img src={this.state.userImg} alt=\"This is {message.message.userName}'s avatar\"/>\n                  <button className=\"cross\" onClick={()=>{this.remove(message.key)}}>X</button> <p>User: {message.message.userName}, says:</p>\n                  <p>{message.message.userInput}</p>\n                </div>\n              );\n            })}\n          </div>\n          <MessageInputForm handleFormSubmit={this.handleFormSubmit} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}